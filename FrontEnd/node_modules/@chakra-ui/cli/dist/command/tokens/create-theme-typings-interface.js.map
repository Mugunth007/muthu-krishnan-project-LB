{"version":3,"sources":["../../../src/command/tokens/create-theme-typings-interface.ts"],"names":["createThemeTypingsInterface","theme","config","strictComponentTypes","unions","reduce","allUnions","key","maxScanDepth","filter","flatMap","value","target","Array","isArray","semanticTokens","semanticTokenKeys","push","textStyles","layerStyles","colorSchemes","componentTypes","template"],"mappings":";;;;;AAAA;;AACA;;AACA;;AAIA;;AACA;;AACA;;;;;;;;SAoCsBA,2B;;;;;yFAAf,iBACLC,KADK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEHC,YAAAA,MAFG,QAEHA,MAFG,+BAEKC,oBAFL,EAEKA,oBAFL,sCAE4B,KAF5B;AAICC,YAAAA,MAJD,GAIUF,MAAM,CAACG,MAAP,CACb,UACEC,SADF,SAGK;AAAA,kBADDC,GACC,SADDA,GACC;AAAA,kBADIC,YACJ,SADIA,YACJ;AAAA,uCADkBC,MAClB;AAAA,kBADkBA,MAClB,6BAD2B;AAAA,uBAAM,IAAN;AAAA,eAC3B;AAAA,wCADuCC,OACvC;AAAA,kBADuCA,OACvC,8BADiD,UAACC,KAAD;AAAA,uBAAWA,KAAX;AAAA,eACjD;AACH,kBAAMC,MAAM,GAAGX,KAAK,CAACM,GAAD,CAApB;AAEAD,cAAAA,SAAS,CAACC,GAAD,CAAT,GAAiB,EAAjB;;AAEA,kBAAI,qBAASK,MAAT,KAAoBC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAxB,EAA+C;AAC7CN,gBAAAA,SAAS,CAACC,GAAD,CAAT,GAAiB,gDAAqBK,MAArB,EAA6BJ,YAA7B,EACdC,MADc,CACPA,MADO,EAEdC,OAFc,CAENA,OAFM,CAAjB;AAGD;;AAED,kBAAI,qBAAST,KAAK,CAACc,cAAf,CAAJ,EAAoC;AAAA;;AAClC;AACA,oBAAMC,iBAAiB,GAAG,8CAAoBf,KAAK,CAACc,cAA1B,EAA0CR,GAA1C,EACvBE,MADuB,CAChBA,MADgB,EAEvBC,OAFuB,CAEfA,OAFe,CAA1B;;AAIA,kCAAAJ,SAAS,CAACC,GAAD,CAAT,EAAeU,IAAf,uBAAuBD,iBAAvB;AACD;;AAED,qBAAOV,SAAP;AACD,aAzBY,EA0Bb,EA1Ba,CAJV;AAiCCY,YAAAA,UAjCD,GAiCc,8CAAoBjB,KAApB,EAA2B,YAA3B,CAjCd;AAkCCkB,YAAAA,WAlCD,GAkCe,8CAAoBlB,KAApB,EAA2B,aAA3B,CAlCf;AAmCCmB,YAAAA,YAnCD,GAmCgB,kDAAwBnB,KAAxB,CAnChB;AAoCCoB,YAAAA,cApCD,GAoCkB,kDAAsBpB,KAAtB,CApClB;AAsCCqB,YAAAA,QAtCD,GAuCH;AAvCG,uIA2CH,sDAAmBlB,MAAnB;AAA2Bc,cAAAA,UAAU,EAAVA,UAA3B;AAAuCC,cAAAA,WAAW,EAAXA,WAAvC;AAAoDC,cAAAA,YAAY,EAAZA;AAApD,eA3CG,YA4CH,gDAAoBC,cAApB,EAAoClB,oBAApC,CA5CG;AAAA,6CAiDE,uDAA8BmB,QAA9B,CAjDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { isObject } from \"@chakra-ui/utils\"\nimport { extractPropertyPaths, printUnionMap } from \"./extract-property-paths\"\nimport {\n  extractComponentTypes,\n  printComponentTypes,\n} from \"./extract-component-types\"\nimport { extractColorSchemeTypes } from \"./extract-color-schemes\"\nimport { extractPropertyKeys } from \"./extract-property-keys\"\nimport { formatWithPrettierIfAvailable } from \"../../utils/format-with-prettier\"\n\nexport interface ThemeKeyOptions {\n  /**\n   * Property key in the theme object\n   * @example colors\n   */\n  key: string\n  /**\n   * Maximum extraction level\n   * @example\n   * union: gray.500\n   * level: 1---|2--|\n   * @default 3\n   */\n  maxScanDepth?: number\n  /**\n   * Pass a function to filter extracted values\n   * @example\n   * Exclude numeric index values from `breakpoints`\n   * @default () => true\n   */\n  filter?: (value: string) => boolean\n\n  /**\n   * Pass a function to flatMap extracted values\n   * @default value => value\n   */\n  flatMap?: (value: string) => string | string[]\n}\n\nexport interface CreateThemeTypingsInterfaceOptions {\n  config: ThemeKeyOptions[]\n  strictComponentTypes?: boolean\n}\n\nexport async function createThemeTypingsInterface(\n  theme: Record<string, unknown>,\n  { config, strictComponentTypes = false }: CreateThemeTypingsInterfaceOptions,\n) {\n  const unions = config.reduce(\n    (\n      allUnions,\n      { key, maxScanDepth, filter = () => true, flatMap = (value) => value },\n    ) => {\n      const target = theme[key]\n\n      allUnions[key] = []\n\n      if (isObject(target) || Array.isArray(target)) {\n        allUnions[key] = extractPropertyPaths(target, maxScanDepth)\n          .filter(filter)\n          .flatMap(flatMap)\n      }\n\n      if (isObject(theme.semanticTokens)) {\n        // semantic tokens do not allow nesting, we just need to extract the keys\n        const semanticTokenKeys = extractPropertyKeys(theme.semanticTokens, key)\n          .filter(filter)\n          .flatMap(flatMap)\n\n        allUnions[key].push(...semanticTokenKeys)\n      }\n\n      return allUnions\n    },\n    {} as Record<string, string[]>,\n  )\n\n  const textStyles = extractPropertyKeys(theme, \"textStyles\")\n  const layerStyles = extractPropertyKeys(theme, \"layerStyles\")\n  const colorSchemes = extractColorSchemeTypes(theme)\n  const componentTypes = extractComponentTypes(theme)\n\n  const template =\n    // language=ts\n    `// regenerate by running\n// npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)\nexport interface ThemeTypings {\n  ${printUnionMap({ ...unions, textStyles, layerStyles, colorSchemes })}\n  ${printComponentTypes(componentTypes, strictComponentTypes)}\n}\n\n`\n\n  return formatWithPrettierIfAvailable(template)\n}\n"],"file":"create-theme-typings-interface.js"}